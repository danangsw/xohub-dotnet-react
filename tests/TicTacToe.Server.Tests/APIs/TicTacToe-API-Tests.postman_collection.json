{
  "info": {
    "name": "TicTacToe API Integration Tests",
    "description": "Postman collection for testing TicTacToe API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response time is less than 1000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "JWKS Endpoint",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/.well-known/jwks.json",
          "host": ["{{baseUrl}}"],
          "path": [".well-known", "jwks.json"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has keys array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('keys');",
              "    pm.expect(jsonData.keys).to.be.an('array');",
              "});",
              "",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    pm.response.to.have.header('Content-Type', 'application/json');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login - Valid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userName\": \"testuser\",\n  \"password\": \"TestPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData.token).to.be.a('string');",
                  "    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Response has userId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "});",
                  "",
                  "pm.test(\"Response has expiresIn\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('expiresIn');",
                  "    pm.expect(jsonData.expiresIn).to.equal(3600);",
                  "});",
                  "",
                  "// Store token and userId for subsequent requests",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set('jwt_token', jsonData.token);",
                  "pm.collectionVariables.set('user_id', jsonData.userId);"
                ]
              }
            }
          ]
        },
        {
          "name": "Login - Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userName\": \"testuser\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData.title).to.equal('Authentication failed');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login - Rate Limit Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userName\": \"testuser\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test should be run multiple times quickly to trigger rate limiting",
                  "if (pm.response.code === 429) {",
                  "    pm.test(\"Rate limit is working\", function () {",
                  "        pm.response.to.have.status(429);",
                  "    });",
                  "    ",
                  "    pm.test(\"Rate limit response has proper headers\", function () {",
                  "        pm.response.to.have.header('Retry-After');",
                  "    });",
                  "} else {",
                  "    pm.test(\"Request processed (rate limit not triggered yet)\", function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([400, 401, 200]);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "    pm.expect(jsonData).to.have.property('userName');",
                  "    pm.expect(jsonData).to.have.property('isAuthenticated', true);",
                  "    pm.expect(jsonData).to.have.property('lastActivity');",
                  "});",
                  "",
                  "pm.test(\"UserId matches login response\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.userId).to.equal(pm.collectionVariables.get('user_id'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Logged out successfully');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Status After Logout",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Note: JWT tokens are stateless, so they remain valid until expiry",
                  "// This test verifies the endpoint still works with the token",
                  "pm.test(\"Status code is 200 (token still valid)\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Security Tests",
      "item": [
        {
          "name": "Access Protected Endpoint Without Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response indicates authentication required\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Access Protected Endpoint With Invalid Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.jwt.token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "status"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}